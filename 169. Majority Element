

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        int cap = n/2;
        unordered_map<int,int> map;

        for(int i=0;i<n;i++){
            if(map.find(nums[i]) == map.end()){
                map[nums[i]] = 1;
            }

            else map[nums[i]] = map[nums[i]] +1;
        }

        for(auto i : map){
            if(i.second > cap) return i.first;
            
        }


        return -1;
    }
};


// memory O(1):

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;
        int res = -1;

        for(int i=0;i<nums.size();i++){
            if(count<=0){
                res = nums[i];
                count +=1;
            }

           else if(nums[i] == res){
               count +=1;
           }

           else count -=1;
        }

        return res;
    }
};

